rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =========================
    // Users
    // =========================
    match /users/{userId} {
      // Allow reading usernames for login checks
      allow read, list: if true;

      // Own account full access
      allow write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;

      // Admins can create/modify employee accounts
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';

      // Admins can read all users
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';

      // Employees can update their own rating fields only
      allow update: if request.auth != null &&
        resource.data.userType == 'employee' &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['averageRating', 'totalRatings', 'lastRatingDate']);
    }

    // User settings
    match /userSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // =========================
    // Clients
    // =========================
    match /clients/{clientId} {
      allow read, write: if request.auth != null && request.auth.uid == clientId;

      // Allow push token updates
      allow update: if request.auth != null && request.auth.uid == clientId &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['pushToken', 'updatedAt', 'settings']);

      // Admins can read all client data
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }

    // =========================
    // Employees
    // =========================
    match /employees/{userId} {
      // Own data
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Employees can read other employees (for messaging)
      allow read: if request.auth != null;
    }

    // =========================
    // Admins
    // =========================
    match /admins/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // =========================
    // Jobs - KEEP CURRENT BROAD ACCESS FOR NOW
    // =========================
    match /jobs/{jobId} {
      // Clients can read/update their own jobs
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType in ['admin', 'employee']
      );

      allow list: if request.auth != null;

      allow create: if request.auth != null || true; // guests can also create
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType in ['admin', 'employee']
      );

      // Allow cleaners to update location/status
      allow update: if request.auth != null &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['cleanerLocation','cleanerDistance','status','actualStartTime','updatedAt']);
    }

    // =========================
    // Bookings
    // =========================
    match /bookings/{bookingId} {
      allow read, list: if true; // prevent logout errors
      allow write: if request.auth != null;
    }

    // Guest bookings
    match /guest-bookings/{bookingId} {
      allow create, read, list, get: if true;
      allow update, delete: if request.auth != null;
    }

    // =========================
    // Messages & Conversations
    // =========================
    match /messages/{messageId} {
      allow read, write, create, list: if request.auth != null;
      allow create: if true; // allow guest messages
    }

    match /conversations/{conversationId} {
      allow read, write, create, list: if request.auth != null;
    }

    match /conversationMessages/{messageId} {
      allow read, write, create: if request.auth != null;
    }

    // Guest chat support
    match /guest-conversations/{conversationId} {
      allow read, write, create, list: if true;
    }
    match /guest-messages/{messageId} {
      allow read, write, create, list: if true;
    }

    // Chats collection
    match /chats/{chatId} {
      allow read, write, create, list: if request.auth != null;
    }

    // =========================
    // Other Collections
    // =========================
    match /workRequests/{requestId} {
      allow read, list: if true;
      allow write: if request.auth != null;
    }

    match /news/{newsId} {
      allow read, write: if request.auth != null;
    }

    match /taskTemplates/{templateId} {
      allow read, write: if request.auth != null;
    }

    match /jobAttachments/{attachmentId} {
      allow read, write: if request.auth != null;
    }

    match /sensorData/{sensorId} {
      allow read, write: if request.auth != null;
    }

    match /floorplans/{floorplanId} {
      allow read, write: if request.auth != null;
    }

    match /recycleBins/{binId} {
      allow read, write: if request.auth != null;
    }

    match /equipment/{equipmentId} {
      allow read, write: if request.auth != null;
    }

    match /unavailability/{requestId} {
      allow read, write: if request.auth != null;
    }

    match /schedules/{scheduleId} {
      allow read, write: if request.auth != null;
    }

    match /maintenance/{maintenanceId} {
      allow read, write: if request.auth != null;
    }

    match /taskCompletions/{completionId} {
      allow read, write: if request.auth != null;
    }

    match /clientSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /audit/{auditId} {
      allow read, write: if request.auth != null;
    }
  }
}
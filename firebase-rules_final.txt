rules_version = '2';

// ===== FIRESTORE RULES =====
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection for username-based auth
    match /users/{userId} {
      allow read, list: if true; // Allow reading and querying for username checks during login
      allow write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      // Allow admins to create employee accounts
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }
    
    // Users can read/write their own settings
    match /userSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Jobs collection - enhanced for notification system
    match /jobs/{jobId} {
      allow read, list: if true; // Allow unauthenticated reads to prevent logout errors
      allow write: if request.auth != null;
      // Allow cleaner location updates for notifications
      allow update: if request.auth != null && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['cleanerLocation', 'cleanerDistance', 'status', 'actualStartTime', 'updatedAt']);
    }
    
    // Guest bookings - anyone can create, read, and query
    match /guest-bookings/{bookingId} {
      allow create, read, list, get: if true;
      allow update, delete: if request.auth != null;
    }
    
    // Client profiles - enhanced for push notifications
    match /clients/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow push token updates for notifications
      allow update: if request.auth != null && request.auth.uid == userId &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['pushToken', 'updatedAt', 'settings']);
    }
    
    // Allow authenticated users to read employee profiles
    match /employees/{userId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read admin profiles
    match /admins/{userId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to create/read bookings
    match /bookings/{bookingId} {
      allow read, list: if true; // Allow unauthenticated reads including queries
      allow write: if request.auth != null;
    }
    
    // Work requests collection
    match /workRequests/{requestId} {
      allow read, list: if true; // Allow unauthenticated reads
      allow write: if request.auth != null;
    }
    
    // Messages collection - authenticated users and guests can create/read
    match /messages/{messageId} {
      allow read, list: if true; // Allow unauthenticated reads
      allow write: if request.auth != null;
      allow create: if true; // Allow guests to create messages
    }
    
    // Chat collections for internal messaging
    match /chats/{chatId} {
      allow read, write, create: if request.auth != null;
      allow list: if request.auth != null;
    }
    
    // Conversations collection for new messaging system
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null;
      // Allow admins to read all conversations for monitoring
      allow read, list: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }
    
    // Messages collection for conversations
    match /conversationMessages/{messageId} {
      allow read, write, create: if request.auth != null;
      // Allow admins to read all conversation messages for monitoring
      allow read, list: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }
    
    // Guest conversations - allow unauthenticated access for guest support
    match /guest-conversations/{conversationId} {
      allow read, write, create, list: if true;
    }
    
    // Guest messages - allow unauthenticated access for guest support
    match /guest-messages/{messageId} {
      allow read, write, create, list: if true;
    }
    
    // News collection - all authenticated users can read/write
    match /news/{newsId} {
      allow read, write: if request.auth != null;
    }
    
    // Task templates collection
    match /taskTemplates/{templateId} {
      allow read, write: if request.auth != null;
    }
    
    // Job attachments (images/videos)
    match /jobAttachments/{attachmentId} {
      allow read, write: if request.auth != null;
    }
    
    // IoT sensor data
    match /sensorData/{sensorId} {
      allow read, write: if request.auth != null;
    }
    
    // Venue floorplans
    match /floorplans/{floorplanId} {
      allow read, write: if request.auth != null;
    }
    
    // Recycle bin status
    match /recycleBins/{binId} {
      allow read, write: if request.auth != null;
    }
    
    // Employee equipment assignments
    match /equipment/{equipmentId} {
      allow read, write: if request.auth != null;
    }
    
    // Employee unavailability requests
    match /unavailability/{requestId} {
      allow read, write: if request.auth != null;
    }
    
    // Employee schedules
    match /schedules/{scheduleId} {
      allow read, write: if request.auth != null;
    }
    
    // Equipment maintenance logs
    match /maintenance/{maintenanceId} {
      allow read, write: if request.auth != null;
    }
    
    // Task completions
    match /taskCompletions/{completionId} {
      allow read, write: if request.auth != null;
    }
    
    // Client settings for notifications
    match /clientSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Audit entries - authenticated users can read/write
    match /audit/{auditId} {
      allow read, write: if request.auth != null;
    }
  }
}

// ===== FIREBASE STORAGE RULES =====
service firebase.storage {
  match /b/{bucket}/o {
    
    // Message images - allow authenticated users to upload and read
    match /message-images/{allPaths=**} {
      allow read, write: if request.auth != null;
    }
    
    // Chat images
    match /chat-images/{chatId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Job photos and videos
    match /job-photos/{jobId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    match /job-videos/{jobId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.resource.size < 50 * 1024 * 1024; // 50MB limit for videos
    }
    
    // Job attachments
    match /job-attachments/{jobId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // Profile images
    match /profile-images/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 2 * 1024 * 1024; // 2MB limit
    }
    
    // Equipment photos
    match /equipment-photos/{equipmentId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // General file uploads - fallback rule
    match /{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
  }
}